What is the purpose of a function prototype?

The Function prototype serves the following purposes – 
1) It tells the return type of the data that the function will return. 
2) It tells the number of arguments passed to the function. 
3) It tells the data types of each of the passed arguments. 
4) Also it tells the order in which the arguments are passed to the function.
Therefore essentially, the function prototype specifies the input/output interlace to the function i.e. what to give to the function and what to expect from the function.
The prototype of a function is also called the signature of the function.
What if one doesn’t specify the function prototype? 
The output of the below kinds of programs is generally asked at many places. 
 

c
int main()
{
   foo();
   getchar();
   return 0;
}
void foo()
{
   printf("foo called");
}
If one doesn’t specify the function prototype, the behavior is specific to the C standard (either C90 or C99) that the compilers implement. Up to the C90 standard, C compilers assumed the return type of the omitted function prototype as int. And this assumption at the compiler side may lead to unspecified program behavior.
Later C99 standard specified that compilers can no longer assume return type as int. Therefore, C99 became more restricted in type checking of function prototypes. But to make C99 standard backward compatible, in practice, compilers throw the warning saying that the return type is assumed as int. But they go ahead with compilation. Thus, it becomes the responsibility of programmers to make sure that the assumed function prototype and the actual function type matches.
To avoid all these implementation specifics of C standards, it is best to have a function prototype.
